{
  "files": [
    {
      "path": "v2/scripts/scenario_apply_freeform_paste.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam(\n  [string]$ProjectRoot,\n  [switch]$FromClipboard,   # prefer clipboard if set; otherwise read stdin if available\n  [switch]$Run              # execute >>>RUN blocks if present\n)\nSet-StrictMode -Version Latest\n$ErrorActionPreference = 'Stop'\n\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) {\n  Set-Location -LiteralPath $ProjectRoot\n}\nWrite-Host (\"Project root: \" + (Get-Location).Path)\n\nfunction _Write-File([string]$Path,[string]$Content){\n  $full = Join-Path (Get-Location) $Path\n  $dir  = Split-Path -Parent $full\n  if ($dir -and -not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }\n  Set-Content -Encoding utf8NoBOM -LiteralPath $full -Value $Content\n  Write-Host (\"WROTE: \" + $Path)\n}\n\nfunction _Try-JsonFiles([string]$Text){\n  try {\n    $obj = $Text | ConvertFrom-Json -ErrorAction Stop\n    if ($obj -and $obj.files){\n      foreach($f in $obj.files){\n        if ($f.path -and $null -ne $f.contents){\n          _Write-File $f.path ([string]$f.contents)\n        }\n      }\n      return $true\n    }\n  } catch {}\n  return $false\n}\n\nfunction _DetectPython {\n  if (Test-Path -LiteralPath \"./.pf/venv.json\") {\n    try {\n      $j = Get-Content ./.pf/venv.json -Raw | ConvertFrom-Json\n      if ($j.python) { return [string]$j.python }\n    } catch {}\n  }\n  $c = (Get-Command py      -ErrorAction SilentlyContinue)?.Source; if ($c) { return $c }\n  $c = (Get-Command python  -ErrorAction SilentlyContinue)?.Source; if ($c) { return $c }\n  return $null\n}\n\nfunction _RunBlock([string]$Lang,[string]$Body){\n  $lang = ($Lang ?? \"\").ToUpperInvariant()\n  if ($lang -eq '' -or $lang -eq 'PS' -or $lang -eq 'POWERSHELL') {\n    Write-Host \"[RUN:PS] >>>\"\n    Invoke-Command -ScriptBlock ([scriptblock]::Create($Body))\n    Write-Host \"[RUN:PS] <<<\"\n    return\n  } elseif ($lang -eq 'PY' -or $lang -eq 'PYTHON') {\n    $py = _DetectPython\n    if (-not $py) { throw \"Python not found (set .pf/venv.json with `\"python`\" or install py/python on PATH).\" }\n    $tmpDir = \".\\.pf\\tmp\"; New-Item -ItemType Directory -Force -Path $tmpDir | Out-Null\n    $tmp = Join-Path $tmpDir (\"run_\" + (Get-Date -Format \"yyyyMMdd_HHmmss_fff\") + \".py\")\n    Set-Content -Encoding utf8NoBOM -LiteralPath $tmp -Value $Body\n    Write-Host \"[RUN:PY] $py $tmp\"\n    & $py $tmp\n    Write-Host (\"[RUN:PY] rc=\" + $LASTEXITCODE)\n    return\n  } else {\n    throw (\"Unknown RUN language: {0} (use PS or PY).\" -f $Lang)\n  }\n}\n\nfunction _Parse-Freeform([string]$Text){\n  $res = [pscustomobject]@{ files=@(); runs=@() }\n\n  # 1) >>>FILE path ... >>>END   (supports spaces/UNC/etc)\n  $mFile = [regex]::Matches($Text,'(?ms)^[ \\t]*>>>FILE[ \\t]+(.+?)\\r?\\n(.*?)\\r?\\n[ \\t]*>>>END[ \\t]*')\n  foreach($m in $mFile){ $res.files += [pscustomobject]@{ path=$m.Groups[1].Value.Trim(); contents=$m.Groups[2].Value } }\n\n  # 2) Block runs: >>>RUN:PS|PY ... >>>ENDRUN\n  $mRunBlock = [regex]::Matches($Text,'(?ms)^[ \\t]*>>>RUN(?::(?<lang>[A-Za-z]+))?[ \\t]*\\r?\\n(?<body>.*?)\\r?\\n[ \\t]*>>>ENDRUN[ \\t]*')\n  foreach($m in $mRunBlock){ $res.runs += [pscustomobject]@{ kind='block'; lang=$m.Groups['lang'].Value; body=$m.Groups['body'].Value } }\n\n  # 3) Single-line runs: >>>RUN <command>\n  $lines = $Text -split \"`r?`n\"\n  foreach($line in $lines){\n    if ($line -match '^[ \\t]*>>>RUN[ \\t]+(.+)$') {\n      $res.runs += [pscustomobject]@{ kind='single'; cmd=$matches[1] }\n    }\n  }\n\n  # 4) Fallback headers: A) path …  B) path …  (content between headers)\n  if ($res.files.Count -eq 0) {\n    $headers = @()\n    for($j=0; $j -lt $lines.Length; $j++){\n      if ($lines[$j] -match '^\\s*[A-Z0-9]\\)\\s+(.+)$'){\n        $headers += [pscustomobject]@{ idx=$j; path=$matches[1].Trim() }\n      }\n    }\n    if ($headers.Count -gt 0) {\n      for($k=0; $k -lt $headers.Count; $k++){\n        $start = $headers[$k].idx + 1\n        $end   = if ($k -lt $headers.Count-1) { $headers[$k+1].idx } else { $lines.Length }\n        $content = ($lines[$start..($end-1)] -join \"`r`n\")\n        $res.files += [pscustomobject]@{ path=$headers[$k].path; contents=$content }\n      }\n    }\n  }\n\n  return $res\n}\n\n# --- Acquire text (clipboard first, else stdin) ---\n$text = $null\nif ($FromClipboard) { try { $text = Get-Clipboard -Raw } catch {} }\nif (-not $text) {\n  try { if ([Console]::In.Peek() -ne -1) { $text = [Console]::In.ReadToEnd() } } catch {}\n}\nif (-not $text) { try { $text = Get-Clipboard -Raw } catch {} }\nif (-not $text -or [string]::IsNullOrWhiteSpace($text)) { throw 'No input text (clipboard/stdin).' }\n\n# 1) Channel-A JSON?\nif (_Try-JsonFiles $text) { Write-Host 'Applied Channel-A JSON.'; return }\n\n# 2) Free-form formats\n$parsed = _Parse-Freeform $text\nif (($parsed.files.Count -eq 0) -and ($parsed.runs.Count -eq 0)) {\n  throw 'Unrecognized paste format. Supported: Channel-A JSON; >>>FILE blocks; >>>RUN / >>>RUN:LANG blocks; A)/B)/C)/1)/2) headers (with optional ``` fences).'\n}\n\nforeach($f in $parsed.files){ _Write-File $f.path $f.contents }\n\nif ($Run -and $parsed.runs.Count -gt 0) {\n  foreach($r in $parsed.runs){\n    if ($r.kind -eq 'single') {\n      Write-Host (\"[RUN] \" + $r.cmd)\n      Invoke-Expression $r.cmd\n    } else {\n      _RunBlock $r.lang $r.body\n    }\n  }\n  Write-Host 'Freeform paste applied + executed.'\n} else {\n  Write-Host 'Freeform paste applied (no execution).'\n}"
    },
    {
      "path": "v2/scripts/scenario_apply_freeform_paste_clipboard.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference='Stop'\n& .\\v2\\scripts\\scenario_apply_freeform_paste.ps1 -ProjectRoot $ProjectRoot -FromClipboard:$true"
    },
    {
      "path": "v2/scripts/scenario_apply_freeform_paste_clipboard_run.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference='Stop'\n& .\\v2\\scripts\\scenario_apply_freeform_paste.ps1 -ProjectRoot $ProjectRoot -FromClipboard:$true -Run:$true"
    }
  ]
}
