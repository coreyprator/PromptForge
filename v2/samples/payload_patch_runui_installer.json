{
  "files": [
    {
      "path": "v2/scripts/scenario_install_runui_command.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference = 'Stop'\n\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) {\n  Set-Location -LiteralPath $ProjectRoot\n}\n\n# --- locations\n$pfApp    = Join-Path $env:APPDATA 'PromptForge'\n$runuiDir = Join-Path $pfApp 'RunUI'\nNew-Item -ItemType Directory -Force -Path $runuiDir | Out-Null\n$helperDst = Join-Path $runuiDir 'RunUI.Helper.ps1'\n\n# --- ensure helper exists (copy from project; else bootstrap a minimal helper)\n$helperSrc = Join-Path (Get-Location) 'v2\\tools\\RunUI.Helper.ps1'\nif (Test-Path -LiteralPath $helperSrc) {\n  Copy-Item -LiteralPath $helperSrc -Destination $helperDst -Force\n}\nif (-not (Test-Path -LiteralPath $helperDst)) {\n  @'\n[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference = 'Stop'\n\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) {\n  Set-Location -LiteralPath $ProjectRoot\n}\n\nfunction _GetPy {\n  (Get-Command py -ErrorAction SilentlyContinue)?.Source `\n    ?? (Get-Command python -ErrorAction SilentlyContinue)?.Source `\n    ?? 'python'\n}\n\n$manifest = Join-Path (Get-Location) '.pf/runui.json'\nif (Test-Path -LiteralPath $manifest) {\n  $m = Get-Content $manifest -Raw | ConvertFrom-Json\n  $workdir = if ($m.workdir) { (Resolve-Path $m.workdir).Path } else { (Get-Location).Path }\n  $cmd = $m.command\n  if (-not $cmd) { throw 'runui.json missing .command' }\n  switch ($cmd.type) {\n    'python' {\n      $py = _GetPy\n      $args = @($cmd.args) | Where-Object { $_ }\n      if (-not $args) { $args = @('-X','utf8','./app.py') }\n      Start-Process -FilePath $py -ArgumentList ($args -join ' ') -WorkingDirectory $workdir | Out-Null\n    }\n    'pwsh_script' {\n      $pw = (Get-Command pwsh -ErrorAction SilentlyContinue)?.Source ?? 'pwsh'\n      $path = $cmd.path\n      if (-not $path) { throw 'pwsh_script requires .path' }\n      $extra = @($cmd.args) -join ' '\n      $argLine = \"-NoLogo -NoProfile -File `\"$path`\" -ProjectRoot . $extra\"\n      Start-Process -FilePath $pw -ArgumentList $argLine -WorkingDirectory $workdir | Out-Null\n    }\n    'exec' {\n      $exec = @($cmd.exec) | Where-Object { $_ }\n      if (-not $exec -or $exec.Count -lt 1) { throw 'exec requires .exec array' }\n      Start-Process -FilePath $exec[0] -ArgumentList (($exec | Select-Object -Skip 1) -join ' ') -WorkingDirectory $workdir | Out-Null\n    }\n    default { throw (\"Unknown command.type: {0}\" -f $cmd.type) }\n  }\n  Write-Host (\"RunUI: launched via manifest from {0}\" -f $workdir)\n  return\n}\n\nthrow 'RunUI.Helper: no .pf/runui.json found. Generate one via scenario_runui_write_manifest.ps1'\n'@ | Set-Content -Encoding utf8NoBOM $helperDst\n}\n\n# --- profile block (write to BOTH profiles)\n$markerStart = '# >>> PromptForge RunUI >>>'\n$markerEnd   = '# <<< PromptForge RunUI <<<'\n$block = @\"\n# >>> PromptForge RunUI >>>\nfunction RunUI {\n  param([string]$ProjectRoot)\n  try {\n    `\$root = if (`\$PSBoundParameters.ContainsKey('ProjectRoot') -and `\$ProjectRoot) { `\$ProjectRoot } else { (Get-Location).Path }\n    & '$helperDst' -ProjectRoot `\$root\n  } catch { Write-Error `\$_ }\n}\nSet-Alias run_ui RunUI\nSet-Alias runui  RunUI\n# <<< PromptForge RunUI <<<\n\"@\n\n$targets = @()\nif ($PROFILE.CurrentUserAllHosts) { $targets += $PROFILE.CurrentUserAllHosts }\nif ($PROFILE) { $targets += $PROFILE }\n\nforeach($p in $targets){\n  $dir = Split-Path -Parent $p\n  if (-not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }\n  if (-not (Test-Path -LiteralPath $p))   { New-Item -ItemType File      -Force -Path $p   | Out-Null }\n  $txt = (Get-Content $p -Raw) 2>$null\n  if ($null -eq $txt) { $txt = '' }\n  if ($txt -match [regex]::Escape($markerStart)) { $txt = ($txt -split [regex]::Escape($markerStart))[0] }\n  Set-Content -Encoding utf8NoBOM -Path $p -Value ($txt + \"`r`n\" + $block)\n}\n\nWrite-Host (\"Installed RunUI helper to: \" + $helperDst)\nWrite-Host (\"Updated profiles: \" + ($targets -join ', '))\nWrite-Host \"To enable now in THIS session run:\"\nWrite-Host (\". `\"$($PROFILE.CurrentUserAllHosts)`\" ; . `\"$($PROFILE)`\"\")\n"
    }
  ]
}
