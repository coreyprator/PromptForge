{
  "files": [
    {
      "path": "v2/scripts/scenario_pf_apply_theme_minimal.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference='Stop'\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot){ Set-Location -LiteralPath $ProjectRoot }\n\nWrite-Host \"Project: $((Get-Location).Path)\"\n\n# --- 1) Repair PATH_RE (once) ---\n$utils = Join-Path (Get-Location) 'pf\\utils.py'\nif (Test-Path -LiteralPath $utils) {\n  $src = Get-Content -Raw -Encoding UTF8 $utils\n  $pattern = '(?m)^\\s*PATH_RE\\s*=\\s*re\\.compile\\(.*?\\)\\s*$'\n  $replacement = 'PATH_RE = re.compile(r''((?:[A-Za-z]:[\\\\/]|\\\\\\\\[^\\\\s/\\\\\\\\:*?\"\"<>|]+[\\\\/]|/)[^\\\\r\\\\n]+)'')'\n  $fixed = [regex]::Replace($src, $pattern, $replacement)\n  if ($fixed -ne $src) { Set-Content -Encoding utf8NoBOM -LiteralPath $utils -Value $fixed; Write-Host 'Repaired PATH_RE in pf\\utils.py' }\n}\n\n# --- 2) Write pf/state_theme.py (logs to .pf/state.log) ---\n$state = @'\nfrom __future__ import annotations\nfrom pathlib import Path\nfrom typing import Any, Dict, Optional\nimport json, sys, tkinter as tk\ntry:\n    import tkinter.ttk as ttk\nexcept Exception:\n    ttk = None  # type: ignore\n\nfrom pf.utils import load_project_config\n\n# --- tiny logger ---\ndef _log(app_or_root, *msg: object) -> None:\n    try:\n        # figure project root\n        pr = getattr(app_or_root, \"project_root\", None)\n        if pr is None:\n            # best-effort: PF keeps project_root on the app object; default to CWD\n            pr = Path.cwd()\n        p = Path(pr) / \".pf\" / \"state.log\"\n        p.parent.mkdir(parents=True, exist_ok=True)\n        with p.open(\"a\", encoding=\"utf-8\") as f:\n            f.write(\" \".join(str(m) for m in msg) + \"\\n\")\n    except Exception:\n        print(\"PF[theme]\", *msg, file=sys.stderr)\n\n# --- state json ---\ndef _state_path(project_root: Path) -> Path:\n    return Path(project_root) / \".pf\" / \"state.json\"\n\ndef load_pf_state(project_root: Path) -> Dict[str, Any]:\n    try:\n        return json.loads(_state_path(project_root).read_text(encoding=\"utf-8\"))\n    except Exception:\n        return {}\n\ndef save_pf_state(project_root: Path, update: Dict[str, Any]) -> None:\n    p = _state_path(project_root)\n    p.parent.mkdir(parents=True, exist_ok=True)\n    cur = load_pf_state(project_root)\n    cur.update(update or {})\n    p.write_text(json.dumps(cur, indent=2), encoding=\"utf-8\")\n\n# --- features ---\ndef apply_theme_from_config(app) -> None:\n    try:\n        cfg = load_project_config(app.project_root) or {}\n        color = cfg.get(\"theme_color\")\n        if not color:\n            _log(app, \"no theme_color in .pf/project.json\")\n            return\n        root = getattr(app, \"root\", None) or getattr(app, \"window\", None)\n        if not root:\n            _log(app, \"no root/window on app\")\n            return\n        try: root.configure(bg=color)\n        except Exception: pass\n        if ttk:\n            try: ttk.Style(root).configure(\".\", background=color)\n            except Exception: pass\n        parent = getattr(app, \"header_frame\", None) or root\n        try:\n            old = getattr(app, \"_pf_color_badge\", None)\n            if old: old.destroy()\n        except Exception: pass\n        try:\n            bg = parent.cget(\"bg\")\n        except Exception:\n            bg = None\n        badge = tk.Label(parent, text=\"\\u25CF\", font=(\"Segoe UI\", 14), fg=color, bg=bg)\n        try: badge.pack(side=\"left\", padx=6)\n        except Exception:\n            try: badge.grid(row=0, column=0, padx=6, sticky=\"w\")\n            except Exception: badge.place(x=6, y=6)\n        app._pf_color_badge = badge\n        try:\n            t = (getattr(app, \"root\", None) or getattr(app, \"window\", None))\n            if t: t.title(f\"{t.title()} â”‚ theme {color}\")\n        except Exception: pass\n        _log(app, \"badge shown\", color)\n    except Exception as e:\n        _log(app, \"apply_theme_from_config error:\", e)\n\ndef persist_last_scenario(app) -> None:\n    # use common tk StringVar on the app\n    var = None\n    for n in (\"scenario_var\", \"scenario_name_var\"):\n        v = getattr(app, n, None)\n        if hasattr(v, \"get\") and hasattr(v, \"set\"):\n            var = v; break\n    if not var:\n        _log(app, \"no scenario var found\")\n        return\n    st = load_pf_state(app.project_root)\n    last = st.get(\"last_scenario\")\n    try:\n        if last: var.set(last)\n    except Exception: pass\n    def _save(*_):\n        try: save_pf_state(app.project_root, {\"last_scenario\": var.get()})\n        except Exception: pass\n    try: var.trace_add(\"write\", lambda *_: _save())\n    except Exception:\n        try: var.trace(\"w\", lambda *_: _save())\n        except Exception: pass\n    _log(app, \"scenario persistence wired (restored:\", last, \")\")\n\ndef auto_open_on_project_change(app) -> None:\n    var = getattr(app, \"project_var\", None)\n    if not var:\n        _log(app, \"no project_var; skip auto-open\")\n        return\n    def _do_open(sel: Optional[str]):\n        if not sel: return\n        for name in (\"open_project\", \"on_open_clicked\", \"on_open_project\", \"_open_project\"):\n            fn = getattr(app, name, None)\n            if callable(fn):\n                try:\n                    if getattr(fn, \"__code__\", None) and fn.__code__.co_argcount >= 2:\n                        fn(sel)\n                    else:\n                        fn()\n                except Exception:\n                    pass\n                break\n    def _changed(*_):\n        try: _do_open(var.get())\n        except Exception: pass\n    try: var.trace_add(\"write\", lambda *_: _changed())\n    except Exception:\n        try: var.trace(\"w\", lambda *_: _changed())\n        except Exception: pass\n    _log(app, \"project_var auto-open wired\")\n\n# called directly from app.py after App() is constructed\ndef after_construct(app) -> None:\n    root = getattr(app, \"root\", None) or getattr(app, \"window\", None)\n    if not root:\n        _log(app, \"after_construct: no root; postpone\")\n        return\n    def _go():\n        try:\n            apply_theme_from_config(app)\n            persist_last_scenario(app)\n            auto_open_on_project_change(app)\n        except Exception as e:\n            _log(app, \"after_construct error:\", e)\n    try:\n        root.after(200, _go)\n        _log(app, \"hooks scheduled\")\n    except Exception:\n        _go()\n'@\n\n$dst = 'pf/state_theme.py'\nSet-Content -Encoding utf8NoBOM -LiteralPath $dst -Value $state\nWrite-Host \"Wrote $dst\"\n\n# --- 3) Patch app.py: call after_construct(app) explicitly ---\n$app = 'app.py'\nif (-not (Test-Path -LiteralPath $app)) { throw \"Not found: $app\" }\n$src = Get-Content -Raw -Encoding UTF8 $app\n$did = $false\n\n# Pattern A: single-liner App().run()\nif ($src -match 'App\\(\\)\\.run\\(\\)') {\n  $src = $src -replace 'App\\(\\)\\.run\\(\\)', \"from pf.state_theme import after_construct`r`napp = App()`r`ntry: after_construct(app)`r`nexcept Exception: pass`r`napp.run()\"\n  $did = $true\n}\n# Pattern B: app = App() ... app.run()\nelseif ($src -match '(?m)^\\s*app\\s*=\\s*App\\(\\)') {\n  if ($src -notmatch 'after_construct\\(app\\)') {\n    $src = $src -replace '(?m)^(\\s*app\\s*=\\s*App\\(\\).*)$', \"$1`r`nfrom pf.state_theme import after_construct`r`ntry: after_construct(app)`r`nexcept Exception: pass\"\n    $did = $true\n  }\n}\nif ($did) { Set-Content -Encoding utf8NoBOM -LiteralPath $app -Value $src; Write-Host 'Patched app.py (explicit after_construct).' } else { Write-Host 'app.py already ok (after_construct present).' }\n\n# Ensure a theme_color so badge has a color\n$pj = '.\\\\.pf\\\\project.json'\n$cfg = @{}\nif (Test-Path $pj) { try { $cfg = Get-Content -Raw $pj | ConvertFrom-Json -AsHashtable } catch { $cfg = @{} } }\nif (-not $cfg.ContainsKey('theme_color')) { $cfg['theme_color'] = '#880000' }\nNew-Item -ItemType Directory -Force -Path '.\\\\.pf' | Out-Null\n($cfg | ConvertTo-Json -Depth 10) | Set-Content -Encoding utf8NoBOM $pj\nWrite-Host ('theme_color: ' + $cfg['theme_color'])\n\nWrite-Host '[pf_apply_theme_minimal] DONE'\n"
    },
    {
      "path": "pf/state_theme.py",
      "language": "python",
      "op": "write",
      "contents": "from __future__ import annotations\nfrom pathlib import Path\nfrom typing import Any, Dict, Optional\nimport json, sys, tkinter as tk\ntry:\n    import tkinter.ttk as ttk\nexcept Exception:\n    ttk = None  # type: ignore\n\nfrom pf.utils import load_project_config\n\ndef _log(app_or_root, *msg: object) -> None:\n    try:\n        pr = getattr(app_or_root, 'project_root', None) or Path.cwd()\n        p = Path(pr) / '.pf' / 'state.log'\n        p.parent.mkdir(parents=True, exist_ok=True)\n        with p.open('a', encoding='utf-8') as f:\n            f.write(' '.join(str(m) for m in msg) + '\\n')\n    except Exception:\n        print('PF[theme]', *msg, file=sys.stderr)\n\n# state read/write\n\ndef _state_path(project_root: Path) -> Path:\n    return Path(project_root) / '.pf' / 'state.json'\n\ndef load_pf_state(project_root: Path) -> Dict[str, Any]:\n    try:\n        return json.loads(_state_path(project_root).read_text(encoding='utf-8'))\n    except Exception:\n        return {}\n\ndef save_pf_state(project_root: Path, update: Dict[str, Any]) -> None:\n    p = _state_path(project_root)\n    p.parent.mkdir(parents=True, exist_ok=True)\n    cur = load_pf_state(project_root)\n    cur.update(update or {})\n    p.write_text(json.dumps(cur, indent=2), encoding='utf-8')\n\n# features\n\ndef apply_theme_from_config(app) -> None:\n    try:\n        cfg = load_project_config(app.project_root) or {}\n        color = cfg.get('theme_color')\n        if not color:\n            _log(app, 'no theme_color in .pf/project.json')\n            return\n        root = getattr(app, 'root', None) or getattr(app, 'window', None)\n        if not root:\n            _log(app, 'no root/window on app')\n            return\n        try: root.configure(bg=color)\n        except Exception: pass\n        if ttk:\n            try: ttk.Style(root).configure('.', background=color)\n            except Exception: pass\n        parent = getattr(app, 'header_frame', None) or root\n        try:\n            old = getattr(app, '_pf_color_badge', None)\n            if old: old.destroy()\n        except Exception: pass\n        try:\n            bg = parent.cget('bg')\n        except Exception:\n            bg = None\n        badge = tk.Label(parent, text='\\u25CF', font=('Segoe UI', 14), fg=color, bg=bg)\n        try: badge.pack(side='left', padx=6)\n        except Exception:\n            try: badge.grid(row=0, column=0, padx=6, sticky='w')\n            except Exception: badge.place(x=6, y=6)\n        app._pf_color_badge = badge\n        try:\n            t = (getattr(app, 'root', None) or getattr(app, 'window', None))\n            if t: t.title(f\"{t.title()} â”‚ theme {color}\")\n        except Exception: pass\n        _log(app, 'badge shown', color)\n    except Exception as e:\n        _log(app, 'apply_theme_from_config error:', e)\n\ndef persist_last_scenario(app) -> None:\n    var = None\n    for n in ('scenario_var', 'scenario_name_var'):\n        v = getattr(app, n, None)\n        if hasattr(v, 'get') and hasattr(v, 'set'):\n            var = v; break\n    if not var:\n        _log(app, 'no scenario var found')\n        return\n    st = load_pf_state(app.project_root)\n    last = st.get('last_scenario')\n    try:\n        if last: var.set(last)\n    except Exception: pass\n    def _save(*_):\n        try: save_pf_state(app.project_root, {'last_scenario': var.get()})\n        except Exception: pass\n    try: var.trace_add('write', lambda *_: _save())\n    except Exception:\n        try: var.trace('w', lambda *_: _save())\n        except Exception: pass\n    _log(app, 'scenario persistence wired (restored:', last, ')')\n\ndef auto_open_on_project_change(app) -> None:\n    var = getattr(app, 'project_var', None)\n    if not var:\n        _log(app, 'no project_var; skip auto-open')\n        return\n    def _do_open(sel: Optional[str]):\n        if not sel: return\n        for name in ('open_project', 'on_open_clicked', 'on_open_project', '_open_project'):\n            fn = getattr(app, name, None)\n            if callable(fn):\n                try:\n                    if getattr(fn, '__code__', None) and fn.__code__.co_argcount >= 2:\n                        fn(sel)\n                    else:\n                        fn()\n                except Exception:\n                    pass\n                break\n    def _changed(*_):\n        try: _do_open(var.get())\n        except Exception: pass\n    try: var.trace_add('write', lambda *_: _changed())\n    except Exception:\n        try: var.trace('w', lambda *_: _changed())\n        except Exception: pass\n    _log(app, 'project_var auto-open wired')\n\ndef after_construct(app) -> None:\n    root = getattr(app, 'root', None) or getattr(app, 'window', None)\n    if not root:\n        _log(app, 'after_construct: no root; postpone')\n        return\n    def _go():\n        try:\n            apply_theme_from_config(app)\n            persist_last_scenario(app)\n            auto_open_on_project_change(app)\n        except Exception as e:\n            _log(app, 'after_construct error:', e)\n    try:\n        root.after(200, _go)\n        _log(app, 'hooks scheduled')\n    except Exception:\n        _go()\n"
    }
  ]
}