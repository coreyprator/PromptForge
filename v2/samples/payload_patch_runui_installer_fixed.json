{
  "files": [
    {
      "path": "v2/scripts/scenario_install_runui_command.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference = 'Stop'\n\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) { Set-Location -LiteralPath $ProjectRoot }\n\n$pfApp    = Join-Path $env:APPDATA 'PromptForge'\n$runuiDir = Join-Path $pfApp 'RunUI'\nNew-Item -ItemType Directory -Force -Path $runuiDir | Out-Null\n\n$helperSrc = Join-Path (Get-Location) 'v2/tools/RunUI.Helper.ps1'\n$helperDst = Join-Path $runuiDir 'RunUI.Helper.ps1'\nif (Test-Path -LiteralPath $helperSrc) { Copy-Item -LiteralPath $helperSrc -Destination $helperDst -Force }\n\nif (-not (Test-Path -LiteralPath $helperDst)) {\n  $helperCode = @'\n[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference = 'Stop'\n\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) { Set-Location -LiteralPath $ProjectRoot }\n\nfunction _GetPy {\n  (Get-Command py -ErrorAction SilentlyContinue)?.Source `\n    ?? (Get-Command python -ErrorAction SilentlyContinue)?.Source `\n    ?? 'python'\n}\n\n$manifest = Join-Path (Get-Location) '.pf/runui.json'\nif (-not (Test-Path -LiteralPath $manifest)) { throw 'RunUI.Helper: no .pf/runui.json found. Generate one via scenario_runui_write_manifest.ps1' }\n\n$m = Get-Content $manifest -Raw | ConvertFrom-Json\n$workdir = if ($m.workdir) { (Resolve-Path $m.workdir).Path } else { (Get-Location).Path }\n$cmd = $m.command\nif (-not $cmd) { throw 'runui.json missing .command' }\n\nswitch ($cmd.type) {\n  'python' {\n    $py = _GetPy\n    $args = @($cmd.args) | Where-Object { $_ }\n    if (-not $args) { $args = @('-X','utf8','./app.py') }\n    Start-Process -FilePath $py -ArgumentList ($args -join ' ') -WorkingDirectory $workdir | Out-Null\n  }\n  'pwsh_script' {\n    $pw = (Get-Command pwsh -ErrorAction SilentlyContinue)?.Source ?? 'pwsh'\n    $path = $cmd.path\n    if (-not $path) { throw 'pwsh_script requires .path' }\n    $extra = @($cmd.args) -join ' '\n    Start-Process -FilePath $pw -ArgumentList ('-NoLogo -NoProfile -File ' + $path + ' -ProjectRoot . ' + $extra) -WorkingDirectory $workdir | Out-Null\n  }\n  'exec' {\n    $exec = @($cmd.exec) | Where-Object { $_ }\n    if (-not $exec -or $exec.Count -lt 1) { throw 'exec requires .exec array' }\n    Start-Process -FilePath $exec[0] -ArgumentList (($exec | Select-Object -Skip 1) -join ' ') -WorkingDirectory $workdir | Out-Null\n  }\n  default { throw ('Unknown command.type: {0}' -f $cmd.type) }\n}\nWrite-Host ('RunUI: launched from ' + $workdir)\n'@\n  Set-Content -Encoding utf8NoBOM -Path $helperDst -Value $helperCode\n}\n\n$markerStart = '# >>> PromptForge RunUI >>>'\n$markerEnd   = '# <<< PromptForge RunUI <<<'\n$block = @'\n# >>> PromptForge RunUI >>>\nfunction RunUI {\n  param([string]$ProjectRoot)\n  try {\n    $root   = if ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) { $ProjectRoot } else { (Get-Location).Path }\n    $pfApp  = Join-Path $env:APPDATA 'PromptForge'\n    $helper = Join-Path (Join-Path $pfApp 'RunUI') 'RunUI.Helper.ps1'\n    & $helper -ProjectRoot $root\n  } catch { Write-Error $_ }\n}\nSet-Alias run_ui RunUI\nSet-Alias runui  RunUI\n# <<< PromptForge RunUI <<<\n'@\n\n$targets = @()\nif ($PROFILE.CurrentUserAllHosts) { $targets += $PROFILE.CurrentUserAllHosts }\nif ($PROFILE) { $targets += $PROFILE }\n$nl = [Environment]::NewLine\nforeach($p in $targets){\n  $dir = Split-Path -Parent $p\n  if (-not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Force -Path $dir | Out-Null }\n  if (-not (Test-Path -LiteralPath $p))   { New-Item -ItemType File      -Force -Path $p   | Out-Null }\n  $txt = (Get-Content $p -Raw) 2>$null\n  if ($null -eq $txt) { $txt = '' }\n  if ($txt -match [regex]::Escape($markerStart)) { $txt = ($txt -split [regex]::Escape($markerStart))[0]; $txt = $txt.TrimEnd() }\n  Set-Content -Encoding utf8NoBOM -Path $p -Value ($txt + $nl + $block)\n}\n\nWrite-Host ('Installed RunUI helper to: ' + $helperDst)\nWrite-Host ('Updated profiles: ' + ($targets -join ', '))\nWrite-Host 'Reload in this session if desired:'\nif (Test-Path $PROFILE.CurrentUserAllHosts) { Write-Host '. $PROFILE.CurrentUserAllHosts' }\nif (Test-Path $PROFILE) { Write-Host '. $PROFILE' }\n"
    }
  ]
}
