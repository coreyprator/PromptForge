{
  "files": [
    {
      "path": "v2/tools/RunUI.Helper.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference = 'Stop'\n\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) {\n  Set-Location -LiteralPath $ProjectRoot\n}\n\nfunction _GetPy {\n  (Get-Command py -ErrorAction SilentlyContinue)?.Source `\n    ?? (Get-Command python -ErrorAction SilentlyContinue)?.Source `\n    ?? 'python'\n}\n\nfunction _RunSelfChecks([string[]]$names) {\n  foreach($n in $names){\n    if ([string]::IsNullOrWhiteSpace($n)) { continue }\n    $p = Join-Path (Get-Location) (\"v2/scripts/scenario_{0}.ps1\" -f $n)\n    if (Test-Path -LiteralPath $p) { & $p -ProjectRoot . | Out-Null }\n  }\n}\n\n$manifest = Join-Path (Get-Location) '.pf/runui.json'\nif (Test-Path -LiteralPath $manifest) {\n  $m = Get-Content $manifest -Raw | ConvertFrom-Json\n  $pre = @($m.precheck) | Where-Object { $_ }\n  _RunSelfChecks $pre\n  $workdir = if ($m.workdir) { (Resolve-Path $m.workdir).Path } else { (Get-Location).Path }\n  $cmd = $m.command\n  if (-not $cmd) { throw 'runui.json missing .command' }\n  switch ($cmd.type) {\n    'python' {\n      $py = _GetPy\n      $args = @($cmd.args) | Where-Object { $_ }\n      if (-not $args) { $args = @('-X','utf8','./app.py') }\n      Start-Process -FilePath $py -ArgumentList ($args -join ' ') -WorkingDirectory $workdir | Out-Null\n    }\n    'pwsh_script' {\n      $pw = (Get-Command pwsh -ErrorAction SilentlyContinue)?.Source ?? 'pwsh'\n      $path = $cmd.path\n      if (-not $path) { throw 'pwsh_script requires .path' }\n      $extra = @($cmd.args) -join ' '\n      $argLine = '-NoLogo -NoProfile -File ' + $path + ' -ProjectRoot . ' + $extra\n      Start-Process -FilePath $pw -ArgumentList $argLine -WorkingDirectory $workdir | Out-Null\n    }\n    'exec' {\n      $exec = @($cmd.exec) | Where-Object { $_ }\n      if (-not $exec -or $exec.Count -lt 1) { throw 'exec requires .exec array' }\n      Start-Process -FilePath $exec[0] -ArgumentList (($exec | Select-Object -Skip 1) -join ' ') -WorkingDirectory $workdir | Out-Null\n    }\n    default { throw ('Unknown command.type: {0}' -f $cmd.type) }\n  }\n  Write-Host ('RunUI: launched via manifest from {0}' -f $workdir)\n  return\n}\n\n$cand = @()\nif (Test-Path -LiteralPath './v2/scripts/scenario_run_ui_here.ps1') { $cand += [pscustomobject]@{ score=90; kind='pwsh_script'; path='v2/scripts/scenario_run_ui_here.ps1'; args=@('-ProjectRoot','.') } }\nif (Test-Path -LiteralPath './app.py') { $cand += [pscustomobject]@{ score=80; kind='python'; args=@('-X','utf8','./app.py') } }\nif (Test-Path -LiteralPath './package.json') {\n  try {\n    $pkg = Get-Content ./package.json -Raw | ConvertFrom-Json\n    if ($pkg.scripts.start) { $cand += [pscustomobject]@{ score=70; kind='exec'; exec=@('npm','run','start') } }\n    elseif ($pkg.scripts.dev) { $cand += [pscustomobject]@{ score=65; kind='exec'; exec=@('npm','run','dev') } }\n  } catch {}\n}\n$csproj = Get-ChildItem -Filter *.csproj -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1\nif ($csproj) { $cand += [pscustomobject]@{ score=60; kind='exec'; exec=@('dotnet','run','--project', $csproj.FullName) } }\n\nif (-not $cand) { throw 'RunUI: no entry point detected; create .pf/runui.json' }\n$choice = $cand | Sort-Object score -Descending | Select-Object -First 1\nswitch ($choice.kind) {\n  'pwsh_script' { $pw = (Get-Command pwsh -ErrorAction SilentlyContinue)?.Source ?? 'pwsh'; Start-Process -FilePath $pw -ArgumentList ('-NoLogo -NoProfile -File ' + $choice.path + ' -ProjectRoot .') -WorkingDirectory (Get-Location).Path | Out-Null }\n  'python'      { $py = _GetPy; Start-Process -FilePath $py -ArgumentList ($choice.args -join ' ') -WorkingDirectory (Get-Location).Path | Out-Null }\n  'exec'        { Start-Process -FilePath $choice.exec[0] -ArgumentList (($choice.exec | Select-Object -Skip 1) -join ' ') -WorkingDirectory (Get-Location).Path | Out-Null }\n}\nWrite-Host 'RunUI: launched via auto-detect'\n"
    },
    {
      "path": "v2/scripts/scenario_install_runui_command.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference = 'Stop'\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) { Set-Location -LiteralPath $ProjectRoot }\n\n$pfApp    = Join-Path $env:APPDATA 'PromptForge'\n$runuiDir = Join-Path $pfApp 'RunUI'\nNew-Item -ItemType Directory -Force -Path $runuiDir | Out-Null\n\n# Copy helper from the project into APPDATA\n$helperSrc = Join-Path (Get-Location) 'v2/tools/RunUI.Helper.ps1'\n$helperDst = Join-Path $runuiDir 'RunUI.Helper.ps1'\nCopy-Item -LiteralPath $helperSrc -Destination $helperDst -Force\n\n# Write (or replace) a small RunUI function in the user's profile\n$profilePath = $PROFILE.CurrentUserAllHosts\nNew-Item -ItemType File -Force -Path $profilePath | Out-Null\n$markerStart = '# >>> PromptForge RunUI >>>'\n$markerEnd   = '# <<< PromptForge RunUI <<<'\n$profileText = Get-Content $profilePath -Raw\nif ($profileText -match [regex]::Escape($markerStart)) { $profileText = ($profileText -split [regex]::Escape($markerStart))[0] }\n\n$fn = @'\n# >>> PromptForge RunUI >>>\nfunction RunUI {\n  param([string]$ProjectRoot)\n  try {\n    $root = if ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) { $ProjectRoot } else { (Get-Location).Path }\n    $helper = Join-Path (Join-Path (Join-Path $env:APPDATA 'PromptForge') 'RunUI') 'RunUI.Helper.ps1'\n    & $helper -ProjectRoot $root\n  } catch {\n    Write-Error $_\n  }\n}\nSet-Alias run_ui RunUI\n# <<< PromptForge RunUI <<<\n'@\n\nSet-Content -Encoding utf8NoBOM -Path $profilePath -Value ($profileText + \"`r`n\" + $fn)\nWrite-Host ('Installed RunUI helper to: ' + $helperDst)\nWrite-Host ('Updated profile: ' + $profilePath)\nWrite-Host 'Reload your profile in this session: . $PROFILE'\n"
    },
    {
      "path": "v2/scripts/scenario_runui_write_manifest.ps1",
      "language": "powershell",
      "op": "write",
      "contents": "[CmdletBinding()]\nparam([string]$ProjectRoot)\nSet-StrictMode -Version Latest\n$ErrorActionPreference='Stop'\nif ($PSBoundParameters.ContainsKey('ProjectRoot') -and $ProjectRoot) { Set-Location -LiteralPath $ProjectRoot }\n\n$cand = @()\nif (Test-Path -LiteralPath './v2/scripts/scenario_run_ui_here.ps1') { $cand += [pscustomobject]@{ score=90; type='pwsh_script'; path='v2/scripts/scenario_run_ui_here.ps1'; args=@('-ProjectRoot','.') } }\nif (Test-Path -LiteralPath './app.py')                              { $cand += [pscustomobject]@{ score=80; type='python';      args=@('-X','utf8','./app.py') } }\nif (Test-Path -LiteralPath './package.json') {\n  try { $pkg = Get-Content ./package.json -Raw | ConvertFrom-Json\n    if ($pkg.scripts.start) { $cand += [pscustomobject]@{ score=70; type='exec'; exec=@('npm','run','start') } }\n    elseif ($pkg.scripts.dev) { $cand += [pscustomobject]@{ score=65; type='exec'; exec=@('npm','run','dev') } }\n  } catch {}\n}\n$csproj = Get-ChildItem -Filter *.csproj -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1\nif ($csproj) { $cand += [pscustomobject]@{ score=60; type='exec'; exec=@('dotnet','run','--project', $csproj.FullName) } }\n\nif (-not $cand) { throw 'Could not detect an entry point. Create .pf/runui.json manually.' }\n$choice = $cand | Sort-Object score -Descending | Select-Object -First 1\n\n$manifest = [ordered]@{ precheck=@('app_selfcheck'); workdir='.'; env=@{}; command=@{} }\n\nswitch ($choice.type) {\n  'python'      { $manifest.command = @{ type='python';     args=$choice.args } }\n  'pwsh_script' { $manifest.command = @{ type='pwsh_script'; path=$choice.path; args=$choice.args } }\n  default       { $manifest.command = @{ type='exec';       exec=$choice.exec } }\n}\n\n$out = ConvertTo-Json $manifest -Depth 6\n$dst = './.pf/runui.json'\nNew-Item -ItemType Directory -Force -Path './.pf' | Out-Null\n$out | Set-Content -Encoding utf8NoBOM $dst\nWrite-Host ('Wrote ' + $dst)\n"
    },
    {
      "path": ".pf/runui.sample.json",
      "language": "json",
      "op": "write",
      "contents": "{\n  \"precheck\": [\"app_selfcheck\"],\n  \"workdir\": \".\",\n  \"env\": {},\n  \"command\": { \"type\": \"python\", \"args\": [\"-X\", \"utf8\", \"./app.py\"] }\n}\n"
    }
  ]
}
